<?php

namespace Saeedvir\LaravelProjectMarkdown\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class ProjectDbMarkdownCommand extends Command
{
    protected $signature = 'project:db-markdown {--path=database.md : Output file path}';
    protected $description = 'Generate Markdown + JSON documentation for the database using INFORMATION_SCHEMA (columns, indexes, foreign keys, ERD with fields and colors)';

    public function handle(): int
    {
        $database = DB::getDatabaseName();

        // متادیتا
        $phpVersion = PHP_VERSION;
        $dbVersion = 'Unknown';
        try {
            $ver = DB::select('select version() as v');
            $dbVersion = $ver[0]->v ?? 'Unknown';
        } catch (\Throwable $e) {
            $dbVersion = 'Unavailable';
        }

        $markdown = "# Database Documentation for `{$database}`\n\n";
        $markdown .= "> Database Type: MySQL/MariaDB\n";
        $markdown .= "> Generated Date: " . date('Y-m-d H:i:s') . "\n";
        $markdown .= "> Generated By: " . 'https://github.com/saeedvir/laravel-project-markdown' . "\n";
        $markdown .= "> PHP Version: **{$phpVersion}** | DB Version: **{$dbVersion}**\n\n";
        $markdown .= "## ER Diagram\n\n";

        $mermaid = "```mermaid\nerDiagram\n";

        $colors = config(
            'laravel-project-markdown.database.er_diagram.colors',
            ['#FFDDC1', '#FFABAB', '#FFC3A0', '#D5AAFF', '#85E3FF', '#B9FBC0', '#FFF5BA', '#F1C0E8']
        );
        $colorIndex = 0;

        $tables = DB::table('information_schema.tables')
            ->where('table_schema', $database)
            ->get();

        if (config('laravel-project-markdown.json.enabled', true)) {
            $jsonData = [
                'database' => $database,
                'generated' => date('Y-m-d H:i:s'),
                'php_version' => $phpVersion,
                'db_version' => $dbVersion,
                'tables' => []
            ];
        } else {
            $jsonData = false;
        }



        foreach ($tables as $table) {
            $tableData = [
                'name' => $table->TABLE_NAME,
                'comment' => $table->TABLE_COMMENT,
                'rows' => 0,
                'columns' => [],
                'indexes' => [],
                'foreign_keys' => [],
                'color' => $colors[$colorIndex % count($colors)]
            ];

            $markdown .= "## {$table->TABLE_NAME}\n\n";
            if ($table->TABLE_COMMENT) {
                $markdown .= "> {$table->TABLE_COMMENT}\n\n";
            }

            $rowCount = DB::table($table->TABLE_NAME)->count();
            $tableData['rows'] = $rowCount;
            $markdown .= "_Rows: {$rowCount}_\n\n";

            $columns = DB::table('information_schema.columns')
                ->where('table_schema', $database)
                ->where('table_name', $table->TABLE_NAME)
                ->orderBy('ORDINAL_POSITION')
                ->get();

            $markdown .= "| Column | Type | Nullable | Default | Key | Comment |\n";
            $markdown .= "|--------|------|----------|---------|-----|---------|\n";

            $mermaid .= "  {$table->TABLE_NAME} {\n";

            foreach ($columns as $col) {
                $tableData['columns'][] = [
                    'name' => $col->COLUMN_NAME,
                    'type' => $col->COLUMN_TYPE,
                    'nullable' => $col->IS_NULLABLE === 'YES',
                    'default' => $col->COLUMN_DEFAULT,
                    'key' => $col->COLUMN_KEY,
                    'comment' => $col->COLUMN_COMMENT
                ];

                $markdown .= sprintf(
                    "| %s | %s | %s | %s | %s | %s |\n",
                    $col->COLUMN_NAME,
                    $col->COLUMN_TYPE,
                    $col->IS_NULLABLE,
                    $col->COLUMN_DEFAULT ?? '',
                    $col->COLUMN_KEY,
                    $col->COLUMN_COMMENT
                );

                $type = strtoupper(explode('(', $col->COLUMN_TYPE)[0]);
                $key = $col->COLUMN_KEY === 'PRI' ? ' PK' : ($col->COLUMN_KEY === 'UNI' ? ' UNIQUE' : '');
                $mermaid .= "    {$type} {$col->COLUMN_NAME}{$key}\n";
            }

            $mermaid .= "  }\n";
            $mermaid .= "  style {$table->TABLE_NAME} fill:{$tableData['color']},stroke:#333,stroke-width:2px;\n";

            // Indexes
            $indexes = DB::table('information_schema.statistics')
                ->where('table_schema', $database)
                ->where('table_name', $table->TABLE_NAME)
                ->get();

            if ($indexes->isNotEmpty()) {
                $markdown .= "\n**Indexes:**\n\n";
                foreach ($indexes->groupBy('INDEX_NAME') as $name => $group) {
                    $cols = $group->pluck('COLUMN_NAME')->implode(', ');
                    $unique = $group->first()->NON_UNIQUE == 0 ? 'UNIQUE' : '';
                    $primary = $name === 'PRIMARY' ? 'PRIMARY' : '';
                    $markdown .= "- {$name} ({$cols}) {$unique} {$primary}\n";
                    $tableData['indexes'][] = [
                        'name' => $name,
                        'columns' => $group->pluck('COLUMN_NAME')->toArray(),
                        'unique' => $unique !== '',
                        'primary' => $primary !== ''
                    ];
                }
            }

            $foreigns = DB::table('information_schema.key_column_usage')
                ->where('table_schema', $database)
                ->where('table_name', $table->TABLE_NAME)
                ->whereNotNull('referenced_table_name')
                ->get();

            if ($foreigns->isNotEmpty()) {
                $markdown .= "\n**Foreign Keys:**\n\n";
                foreach ($foreigns as $fk) {
                    $markdown .= "- {$fk->CONSTRAINT_NAME}: {$fk->COLUMN_NAME} → {$fk->REFERENCED_TABLE_NAME}({$fk->REFERENCED_COLUMN_NAME})\n";
                    $tableData['foreign_keys'][] = [
                        'name' => $fk->CONSTRAINT_NAME,
                        'column' => $fk->COLUMN_NAME,
                        'references' => [
                            'table' => $fk->REFERENCED_TABLE_NAME,
                            'column' => $fk->REFERENCED_COLUMN_NAME
                        ]
                    ];
                    $mermaid .= "  {$table->TABLE_NAME} }o--|| {$fk->REFERENCED_TABLE_NAME} : \"{$fk->COLUMN_NAME}\"\n";
                }
            }

            $markdown .= "\n---\n\n";
            if ($jsonData !== false) {
                $jsonData['tables'][] = $tableData;
            }

            ++$colorIndex;
        }

        $mermaid .= "```\n\n";
        $markdown = $markdown = "# Database Documentation for `{$database}`\n\n" .
            "> Database Type: MySQL/MariaDB | Generated: " . date('Y-m-d H:i:s') .
            " | PHP: **{$phpVersion}** | DB: **{$dbVersion}**\n\n" .
            "## ER Diagram\n\n" . $mermaid . $markdown;

        $path = storage_path('app' . DIRECTORY_SEPARATOR . $this->option('path'));
        file_put_contents($path, $markdown);

        $this->info(string: "Database documentation generated at: {$path}");

        // ذخیره JSON کنار فایل مارک‌داون
        $jsonPath = preg_replace('/\.md$/', '.json', $path);

        if ($jsonData !== false) {
            file_put_contents($jsonPath, json_encode($jsonData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            $this->info(string: "JSON documentation generated at: {$jsonPath}");
        }

        return Command::SUCCESS;
    }
}
